// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_sample_service_messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcSample.Contracts.Messages {

  /// <summary>Holder for reflection information generated from grpc_sample_service_messages.proto</summary>
  public static partial class GrpcSampleServiceMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for grpc_sample_service_messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcSampleServiceMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJncnBjX3NhbXBsZV9zZXJ2aWNlX21lc3NhZ2VzLnByb3RvEgpncnBjc2Ft",
            "cGxlIkUKD0dldExpbmVzUmVxdWVzdBIRCglmaWxlX3BhdGgYASABKAkSHwoX",
            "bnVtYmVyX29mX2xpbmVzX3RvX3JlYWQYAiABKAUiGQoETGluZRIRCgl0ZXh0",
            "X2xpbmUYASABKAkiHwoNTnVtYmVyTWVzc2FnZRIOCgZudW1iZXIYASABKAUi",
            "MQoLU3VtUmVzcG9uc2USCwoDc3VtGAEgASgDEhUKDW51bWJlcnNfY291bnQY",
            "AiABKAUiPgoPTXVsdGlwbHlSZXF1ZXN0EhQKDGZpcnN0X251bWJlchgBIAEo",
            "AhIVCg1zZWNvbmRfbnVtYmVyGAIgASgCIlkKEE11bHRpcGx5UmVzcG9uc2US",
            "FwoPbXVsdGlwbHlfcmVzdWx0GAEgASgBEiwKB3JlcXVlc3QYAiABKAsyGy5n",
            "cnBjc2FtcGxlLk11bHRpcGx5UmVxdWVzdEIgqgIdR3JwY1NhbXBsZS5Db250",
            "cmFjdHMuTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcSample.Contracts.Messages.GetLinesRequest), global::GrpcSample.Contracts.Messages.GetLinesRequest.Parser, new[]{ "FilePath", "NumberOfLinesToRead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcSample.Contracts.Messages.Line), global::GrpcSample.Contracts.Messages.Line.Parser, new[]{ "TextLine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcSample.Contracts.Messages.NumberMessage), global::GrpcSample.Contracts.Messages.NumberMessage.Parser, new[]{ "Number" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcSample.Contracts.Messages.SumResponse), global::GrpcSample.Contracts.Messages.SumResponse.Parser, new[]{ "Sum", "NumbersCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcSample.Contracts.Messages.MultiplyRequest), global::GrpcSample.Contracts.Messages.MultiplyRequest.Parser, new[]{ "FirstNumber", "SecondNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcSample.Contracts.Messages.MultiplyResponse), global::GrpcSample.Contracts.Messages.MultiplyResponse.Parser, new[]{ "MultiplyResult", "Request" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetLinesRequest : pb::IMessage<GetLinesRequest> {
    private static readonly pb::MessageParser<GetLinesRequest> _parser = new pb::MessageParser<GetLinesRequest>(() => new GetLinesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLinesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcSample.Contracts.Messages.GrpcSampleServiceMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLinesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLinesRequest(GetLinesRequest other) : this() {
      filePath_ = other.filePath_;
      numberOfLinesToRead_ = other.numberOfLinesToRead_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLinesRequest Clone() {
      return new GetLinesRequest(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number_of_lines_to_read" field.</summary>
    public const int NumberOfLinesToReadFieldNumber = 2;
    private int numberOfLinesToRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfLinesToRead {
      get { return numberOfLinesToRead_; }
      set {
        numberOfLinesToRead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLinesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLinesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if (NumberOfLinesToRead != other.NumberOfLinesToRead) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (NumberOfLinesToRead != 0) hash ^= NumberOfLinesToRead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (NumberOfLinesToRead != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumberOfLinesToRead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (NumberOfLinesToRead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfLinesToRead);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLinesRequest other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.NumberOfLinesToRead != 0) {
        NumberOfLinesToRead = other.NumberOfLinesToRead;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 16: {
            NumberOfLinesToRead = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Line : pb::IMessage<Line> {
    private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Line> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcSample.Contracts.Messages.GrpcSampleServiceMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line(Line other) : this() {
      textLine_ = other.textLine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line Clone() {
      return new Line(this);
    }

    /// <summary>Field number for the "text_line" field.</summary>
    public const int TextLineFieldNumber = 1;
    private string textLine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextLine {
      get { return textLine_; }
      set {
        textLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Line);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Line other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TextLine != other.TextLine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TextLine.Length != 0) hash ^= TextLine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TextLine.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TextLine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TextLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextLine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Line other) {
      if (other == null) {
        return;
      }
      if (other.TextLine.Length != 0) {
        TextLine = other.TextLine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TextLine = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NumberMessage : pb::IMessage<NumberMessage> {
    private static readonly pb::MessageParser<NumberMessage> _parser = new pb::MessageParser<NumberMessage>(() => new NumberMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumberMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcSample.Contracts.Messages.GrpcSampleServiceMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberMessage(NumberMessage other) : this() {
      number_ = other.number_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberMessage Clone() {
      return new NumberMessage(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumberMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumberMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumberMessage other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SumResponse : pb::IMessage<SumResponse> {
    private static readonly pb::MessageParser<SumResponse> _parser = new pb::MessageParser<SumResponse>(() => new SumResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SumResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcSample.Contracts.Messages.GrpcSampleServiceMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumResponse(SumResponse other) : this() {
      sum_ = other.sum_;
      numbersCount_ = other.numbersCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumResponse Clone() {
      return new SumResponse(this);
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 1;
    private long sum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "numbers_count" field.</summary>
    public const int NumbersCountFieldNumber = 2;
    private int numbersCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumbersCount {
      get { return numbersCount_; }
      set {
        numbersCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SumResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SumResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sum != other.Sum) return false;
      if (NumbersCount != other.NumbersCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sum != 0L) hash ^= Sum.GetHashCode();
      if (NumbersCount != 0) hash ^= NumbersCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Sum);
      }
      if (NumbersCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumbersCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sum);
      }
      if (NumbersCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumbersCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SumResponse other) {
      if (other == null) {
        return;
      }
      if (other.Sum != 0L) {
        Sum = other.Sum;
      }
      if (other.NumbersCount != 0) {
        NumbersCount = other.NumbersCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sum = input.ReadInt64();
            break;
          }
          case 16: {
            NumbersCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplyRequest : pb::IMessage<MultiplyRequest> {
    private static readonly pb::MessageParser<MultiplyRequest> _parser = new pb::MessageParser<MultiplyRequest>(() => new MultiplyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcSample.Contracts.Messages.GrpcSampleServiceMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyRequest(MultiplyRequest other) : this() {
      firstNumber_ = other.firstNumber_;
      secondNumber_ = other.secondNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyRequest Clone() {
      return new MultiplyRequest(this);
    }

    /// <summary>Field number for the "first_number" field.</summary>
    public const int FirstNumberFieldNumber = 1;
    private float firstNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstNumber {
      get { return firstNumber_; }
      set {
        firstNumber_ = value;
      }
    }

    /// <summary>Field number for the "second_number" field.</summary>
    public const int SecondNumberFieldNumber = 2;
    private float secondNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondNumber {
      get { return secondNumber_; }
      set {
        secondNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstNumber != other.FirstNumber) return false;
      if (SecondNumber != other.SecondNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstNumber != 0F) hash ^= FirstNumber.GetHashCode();
      if (SecondNumber != 0F) hash ^= SecondNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstNumber != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FirstNumber);
      }
      if (SecondNumber != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SecondNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstNumber != 0F) {
        size += 1 + 4;
      }
      if (SecondNumber != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplyRequest other) {
      if (other == null) {
        return;
      }
      if (other.FirstNumber != 0F) {
        FirstNumber = other.FirstNumber;
      }
      if (other.SecondNumber != 0F) {
        SecondNumber = other.SecondNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            FirstNumber = input.ReadFloat();
            break;
          }
          case 21: {
            SecondNumber = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiplyResponse : pb::IMessage<MultiplyResponse> {
    private static readonly pb::MessageParser<MultiplyResponse> _parser = new pb::MessageParser<MultiplyResponse>(() => new MultiplyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiplyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcSample.Contracts.Messages.GrpcSampleServiceMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyResponse(MultiplyResponse other) : this() {
      multiplyResult_ = other.multiplyResult_;
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiplyResponse Clone() {
      return new MultiplyResponse(this);
    }

    /// <summary>Field number for the "multiply_result" field.</summary>
    public const int MultiplyResultFieldNumber = 1;
    private double multiplyResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MultiplyResult {
      get { return multiplyResult_; }
      set {
        multiplyResult_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private global::GrpcSample.Contracts.Messages.MultiplyRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcSample.Contracts.Messages.MultiplyRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiplyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiplyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MultiplyResult != other.MultiplyResult) return false;
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MultiplyResult != 0D) hash ^= MultiplyResult.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MultiplyResult != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MultiplyResult);
      }
      if (request_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MultiplyResult != 0D) {
        size += 1 + 8;
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiplyResponse other) {
      if (other == null) {
        return;
      }
      if (other.MultiplyResult != 0D) {
        MultiplyResult = other.MultiplyResult;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::GrpcSample.Contracts.Messages.MultiplyRequest();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MultiplyResult = input.ReadDouble();
            break;
          }
          case 18: {
            if (request_ == null) {
              request_ = new global::GrpcSample.Contracts.Messages.MultiplyRequest();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
