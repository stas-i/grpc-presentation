syntax = "proto3";

package grpcsample;

option csharp_namespace = "GrpcSample.Contracts.Services";

import "grpc_sample_service_messages.proto";
// %USERPROFILE%\.nuget\packages\Google.Protobuf.Tools\3.2.0\tools\google\protobuf
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Test gRPC service.
service GrpcSampleService {
	// A simple RPC.
	rpc GetHelloWorld(google.protobuf.Empty) returns (HelleWorldResponse) {}

	// Protocol Buffers are not designed to handle large messages.
	// As a general rule of thumb, if you are dealing in messages larger than a megabyte each,
	// it may be time to consider an alternate strategy. 
	rpc GetLines(GetLinesRequest) returns (stream Line) {}

	// A client-to-server streaming RPC.
	//
	// Accepts a stream of numbers and return sum of them.
	rpc Sum(stream NumberMessage) returns (SumResponse) {}

	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of Numbers and return stream of multiply responses.
	rpc Multiply(stream MultiplyRequest) returns (stream MultiplyResponse) {}
}

// Hello World example message.
//
//CamelCase used for messages and rpc.
message HelleWorldResponse {
	reserved 2, 15, 9 to 11;
	reserved "foo", "bar";
	// snake_case used form message properties.
	google.protobuf.Int32Value nullable_int = 1;
	// xml comments will be autogenerated
	google.protobuf.Timestamp date_time_property = 3;
	string message = 4;//// ERROR!!!
	Foo foo_field = 5;

	// SCREAMING_SNAKE_CASE used for enums.
	enum Foo {
		UNKNOWN = 0; //// ERROR!!!
		FIRST_VALUE = 2;
		SECOND_VALUE = 3;
	}

	/*
	enum Bar {
		UNKNOWN = 0; //// ERROR!!!
		FIRST_VALUE = 1;
		SECOND_VALUE = 2;
	}
	*/

}